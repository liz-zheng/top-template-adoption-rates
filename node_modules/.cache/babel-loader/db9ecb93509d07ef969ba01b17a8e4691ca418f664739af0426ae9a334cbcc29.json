{"ast":null,"code":"var _jsxFileName = \"/Users/lizzybear/git/top-template-adoption-rates/src/TopAdoptionRates.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TopAdoptionRates.scss';\nimport PercentCircle from './components/PercentCircle/PercentCircle';\nimport DynamicGrid from './components/DynamicGrid/DynamicGrid';\nimport TextDisplay from './components/TextDisplay/TextDisplay';\nimport SimpleGrid from './components/SimpleGrid/SimpleGrid';\nimport LinkButton from './components/LinkButton/LinkButton';\nimport sampleTemplateData from './sampleTemplateData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// sort data in descending order for display\nconst sortByHighestAdoptionRate = data => {\n  return data.sort((a, b) => {\n    const adoptionRateA = parseFloat(a['Adoption rate'].replace('%', ''));\n    const adoptionRateB = parseFloat(b['Adoption rate'].replace('%', ''));\n    return adoptionRateB - adoptionRateA;\n  });\n};\n\n// Placeholder API call for fetching data, but for now, just use sample data\nconst useDataFromApi = apiUrl => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(apiUrl);\n        if (response.ok) {\n          const jsonData = await response.json();\n          setData(jsonData);\n        } else {\n          setData(sampleTemplateData);\n        }\n      } catch (error) {\n        setData(sampleTemplateData);\n      }\n    };\n    fetchData();\n  }, [apiUrl]);\n  return data;\n};\n_s(useDataFromApi, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\nconst getHighestAdoptionRate = data => {\n  const AdoptionRate = {\n    Template: '',\n    'Adoption rate': '',\n    'Total Users': '',\n    'Adopted count': '',\n    'Growth Rate': ''\n  };\n  const sortedData = sortByHighestAdoptionRate(data);\n  if (sortedData.length > 0) {\n    return sortedData[0];\n  }\n  return AdoptionRate;\n};\nconst [data, setData] = useState(sampleTemplateData.slice(0, 3));\nconst [topAdoptionRate, setTopAdoptionRate] = useState(getHighestAdoptionRate(data));\nfunction TopAdoptionRates() {\n  const handleOnClick = () => {\n    console.log('clicked');\n    setData(sampleTemplateData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top-adoption-rates\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'title',\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Top Template Adoption Rates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'top-adoption-percent',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"percent-circle\",\n        children: /*#__PURE__*/_jsxDEV(PercentCircle, {\n          title: 'Adoption rate',\n          titleColor: '#b4bfd5',\n          percentage: parseInt(topAdoptionRate['Adoption rate']),\n          size: 200,\n          strokeWidth: 15,\n          circleColor: '#305bf5',\n          textColor: '#fff',\n          emptyColor: '#1d2435',\n          minSize: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"top-template-detail\",\n        className: \"top-template-detail\",\n        children: [/*#__PURE__*/_jsxDEV(TextDisplay, {\n          title: 'Most Adopted Template',\n          textContent: topAdoptionRate.Template\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n          data: Object.entries(topAdoptionRate).slice(1).map(([key, value]) => ({\n            title: key,\n            content: value\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"template-adoption-grid\",\n      className: \"template-adoption-grid\",\n      children: /*#__PURE__*/_jsxDEV(DynamicGrid, {\n        data: data,\n        hasHeaders: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LinkButton, {\n      children: \"See More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_c = TopAdoptionRates;\nexport default TopAdoptionRates;\nvar _c;\n$RefreshReg$(_c, \"TopAdoptionRates\");","map":{"version":3,"names":["React","useState","useEffect","PercentCircle","DynamicGrid","TextDisplay","SimpleGrid","LinkButton","sampleTemplateData","jsxDEV","_jsxDEV","sortByHighestAdoptionRate","data","sort","a","b","adoptionRateA","parseFloat","replace","adoptionRateB","useDataFromApi","apiUrl","_s","setData","fetchData","response","fetch","ok","jsonData","json","error","getHighestAdoptionRate","AdoptionRate","Template","sortedData","length","slice","topAdoptionRate","setTopAdoptionRate","TopAdoptionRates","handleOnClick","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","titleColor","percentage","parseInt","size","strokeWidth","circleColor","textColor","emptyColor","minSize","textContent","Object","entries","map","key","value","content","hasHeaders","_c","$RefreshReg$"],"sources":["/Users/lizzybear/git/top-template-adoption-rates/src/TopAdoptionRates.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TopAdoptionRates.scss';\nimport PercentCircle from './components/PercentCircle/PercentCircle';\nimport DynamicGrid from './components/DynamicGrid/DynamicGrid';\nimport TextDisplay from './components/TextDisplay/TextDisplay';\nimport SimpleGrid from './components/SimpleGrid/SimpleGrid';\nimport LinkButton from './components/LinkButton/LinkButton';\nimport sampleTemplateData from './sampleTemplateData';\n\ninterface AdoptionRate {\n  Template: string;\n  'Adoption rate': string;\n  'Total Users': string;\n  'Adopted count': string;\n  'Growth Rate': string;\n}\n\n  // sort data in descending order for display\n  const sortByHighestAdoptionRate = (data: AdoptionRate[]): AdoptionRate[] => {\n    return data.sort((a, b) => {\n      const adoptionRateA = parseFloat(a['Adoption rate'].replace('%', ''));\n      const adoptionRateB = parseFloat(b['Adoption rate'].replace('%', ''));\n\n      return adoptionRateB - adoptionRateA;\n    });\n  };\n\n  // Placeholder API call for fetching data, but for now, just use sample data\n  const useDataFromApi = (apiUrl: string) => {\n    const [data, setData] = useState<AdoptionRate[]>([]);\n\n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(apiUrl);\n          if (response.ok) {\n            const jsonData = await response.json();\n            setData(jsonData);\n          } else {\n            setData(sampleTemplateData);\n          }\n        } catch (error) {\n          setData(sampleTemplateData);\n        }\n      };\n\n      fetchData();\n    }, [apiUrl]);\n\n    return data;\n  };\n\n  const getHighestAdoptionRate = (data: AdoptionRate[]): AdoptionRate => {\n    const AdoptionRate = {\n      Template: '',\n      'Adoption rate': '',\n      'Total Users': '',\n      'Adopted count': '',\n      'Growth Rate': '',\n    };\n\n    const sortedData = sortByHighestAdoptionRate(data);\n\n    if (sortedData.length > 0) {\n      return sortedData[0];\n    }\n\n    return AdoptionRate;\n  };\n\n  const [data, setData] = useState(sampleTemplateData.slice(0, 3));\n  const [topAdoptionRate, setTopAdoptionRate] = useState(\n    getHighestAdoptionRate(data)\n  );\n\n\nfunction TopAdoptionRates() {\n  const handleOnClick = () => {\n    console.log('clicked');\n    setData(sampleTemplateData);\n  };\n\n  return (\n    <div className=\"top-adoption-rates\">\n      <div className={'title'}>\n        <h4>Top Template Adoption Rates</h4>\n      </div>\n      <div className={'top-adoption-percent'}>\n        <div data-testid=\"percent-circle\">\n          <PercentCircle\n            title={'Adoption rate'}\n            titleColor={'#b4bfd5'}\n            percentage={parseInt(topAdoptionRate['Adoption rate'])}\n            size={200}\n            strokeWidth={15}\n            circleColor={'#305bf5'}\n            textColor={'#fff'}\n            emptyColor={'#1d2435'}\n            minSize={50}\n          />\n        </div>\n        <div data-testid=\"top-template-detail\" className=\"top-template-detail\">\n          <TextDisplay\n            title={'Most Adopted Template'}\n            textContent={topAdoptionRate.Template}\n          />\n          <SimpleGrid\n            data={Object.entries(topAdoptionRate)\n              .slice(1)\n              .map(([key, value]) => ({\n                title: key,\n                content: value,\n              }))}\n          />\n        </div>\n      </div>\n      <div\n        data-testid=\"template-adoption-grid\"\n        className=\"template-adoption-grid\"\n      >\n        <DynamicGrid data={data} hasHeaders />\n      </div>\n      <LinkButton>See More</LinkButton>\n    </div>\n  );\n}\n\nexport default TopAdoptionRates;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,yBAAyB;AAChC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,WAAW,MAAM,sCAAsC;AAC9D,OAAOC,WAAW,MAAM,sCAAsC;AAC9D,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUpD;AACA,MAAMC,yBAAyB,GAAIC,IAAoB,IAAqB;EAC1E,OAAOA,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACzB,MAAMC,aAAa,GAAGC,UAAU,CAACH,CAAC,CAAC,eAAe,CAAC,CAACI,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACrE,MAAMC,aAAa,GAAGF,UAAU,CAACF,CAAC,CAAC,eAAe,CAAC,CAACG,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAErE,OAAOC,aAAa,GAAGH,aAAa;EACtC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMI,cAAc,GAAIC,MAAc,IAAK;EAAAC,EAAA;EACzC,MAAM,CAACV,IAAI,EAAEW,OAAO,CAAC,GAAGtB,QAAQ,CAAiB,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMsB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,MAAM,CAAC;QACpC,IAAII,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UACtCN,OAAO,CAACK,QAAQ,CAAC;QACnB,CAAC,MAAM;UACLL,OAAO,CAACf,kBAAkB,CAAC;QAC7B;MACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdP,OAAO,CAACf,kBAAkB,CAAC;MAC7B;IACF,CAAC;IAEDgB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,OAAOT,IAAI;AACb,CAAC;AAACU,EAAA,CAtBIF,cAAc;AAwBpB,MAAMW,sBAAsB,GAAInB,IAAoB,IAAmB;EACrE,MAAMoB,YAAY,GAAG;IACnBC,QAAQ,EAAE,EAAE;IACZ,eAAe,EAAE,EAAE;IACnB,aAAa,EAAE,EAAE;IACjB,eAAe,EAAE,EAAE;IACnB,aAAa,EAAE;EACjB,CAAC;EAED,MAAMC,UAAU,GAAGvB,yBAAyB,CAACC,IAAI,CAAC;EAElD,IAAIsB,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,OAAOD,UAAU,CAAC,CAAC,CAAC;EACtB;EAEA,OAAOF,YAAY;AACrB,CAAC;AAED,MAAM,CAACpB,IAAI,EAAEW,OAAO,CAAC,GAAGtB,QAAQ,CAACO,kBAAkB,CAAC4B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrC,QAAQ,CACpD8B,sBAAsB,CAACnB,IAAI,CAC7B,CAAC;AAGH,SAAS2B,gBAAgBA,CAAA,EAAG;EAC1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBnB,OAAO,CAACf,kBAAkB,CAAC;EAC7B,CAAC;EAED,oBACEE,OAAA;IAAKiC,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjClC,OAAA;MAAKiC,SAAS,EAAE,OAAQ;MAAAC,QAAA,eACtBlC,OAAA;QAAAkC,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACNtC,OAAA;MAAKiC,SAAS,EAAE,sBAAuB;MAAAC,QAAA,gBACrClC,OAAA;QAAK,eAAY,gBAAgB;QAAAkC,QAAA,eAC/BlC,OAAA,CAACP,aAAa;UACZ8C,KAAK,EAAE,eAAgB;UACvBC,UAAU,EAAE,SAAU;UACtBC,UAAU,EAAEC,QAAQ,CAACf,eAAe,CAAC,eAAe,CAAC,CAAE;UACvDgB,IAAI,EAAE,GAAI;UACVC,WAAW,EAAE,EAAG;UAChBC,WAAW,EAAE,SAAU;UACvBC,SAAS,EAAE,MAAO;UAClBC,UAAU,EAAE,SAAU;UACtBC,OAAO,EAAE;QAAG;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNtC,OAAA;QAAK,eAAY,qBAAqB;QAACiC,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBACpElC,OAAA,CAACL,WAAW;UACV4C,KAAK,EAAE,uBAAwB;UAC/BU,WAAW,EAAEtB,eAAe,CAACJ;QAAS;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,eACFtC,OAAA,CAACJ,UAAU;UACTM,IAAI,EAAEgD,MAAM,CAACC,OAAO,CAACxB,eAAe,CAAC,CAClCD,KAAK,CAAC,CAAC,CAAC,CACR0B,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,MAAM;YACtBf,KAAK,EAAEc,GAAG;YACVE,OAAO,EAAED;UACX,CAAC,CAAC;QAAE;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNtC,OAAA;MACE,eAAY,wBAAwB;MACpCiC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eAElClC,OAAA,CAACN,WAAW;QAACQ,IAAI,EAAEA,IAAK;QAACsD,UAAU;MAAA;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACNtC,OAAA,CAACH,UAAU;MAAAqC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACmB,EAAA,GAjDQ5B,gBAAgB;AAmDzB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}