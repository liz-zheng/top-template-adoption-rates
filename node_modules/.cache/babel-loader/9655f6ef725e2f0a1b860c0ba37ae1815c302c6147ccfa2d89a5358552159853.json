{"ast":null,"code":"var _jsxFileName = \"/Users/lizzybear/adoption-rate-component/src/TopAdoptionRates.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TopAdoptionRates.scss';\nimport PercentCircle from './components/PercentCircle/PercentCircle';\nimport DynamicGrid from './components/DynamicGrid/DynamicGrid';\nimport TextDisplay from './components/TextDisplay/TextDisplay';\nimport SimpleGrid from './components/SimpleGrid/SimpleGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopAdoptionRates() {\n  _s2();\n  var _s = $RefreshSig$();\n  // I assume data won't really have Adoption rate provided and this will be something we need to calculate using adopted count / total users\n  // but for easy demosntration, will include it for the time being\n  const templateData = [{\n    Template: 'fly-docker-image',\n    'Adoption rate': '80%',\n    'Total Users': '20',\n    'Adopted count': '16',\n    'Growth Rate': '5%'\n  }, {\n    Template: 'Develop in Docker',\n    'Adoption rate': '50%',\n    'Total Users': '20',\n    'Adopted count': '10',\n    'Growth Rate': '65%'\n  }, {\n    Template: 'Develop in Docker-2',\n    'Adoption rate': '30%',\n    'Total Users': '20',\n    'Adopted count': '6',\n    'Growth Rate': '15%'\n  }, {\n    Template: 'AWS EC2',\n    'Adoption rate': '10%',\n    'Total Users': '20',\n    'Adopted count': '2',\n    'Growth Rate': '1%'\n  }];\n  const calculateAdoptionRate = (totalUsers, adoptionCount) => {\n    return adoptionCount / totalUsers * 100;\n  };\n\n  // sort data in descending order (highest first)\n  const sortByHighestAdoptionRate = data => {\n    return data.sort((a, b) => {\n      // Parse the Adoption rate percentage and remove the '%' sign\n      const adoptionRateA = parseFloat(a['Adoption rate'].replace('%', ''));\n      const adoptionRateB = parseFloat(b['Adoption rate'].replace('%', ''));\n      return adoptionRateB - adoptionRateA;\n    });\n  };\n\n  // Api call available for fetching data, if not implemented just use sample data\n  const useDataFromApi = apiUrl => {\n    _s();\n    const [data, setData] = useState([]);\n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(apiUrl);\n          if (response.ok) {\n            const jsonData = await response.json();\n            setData(jsonData);\n          } else {\n            setData(templateData);\n          }\n        } catch (error) {\n          setData(templateData);\n        }\n      };\n      fetchData();\n    }, [apiUrl]);\n    return data;\n  };\n  _s(useDataFromApi, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n  const getHighestAdoptionRate = data => {\n    const AdoptionRate = {\n      Template: '',\n      'Adoption rate': '',\n      'Total Users': '',\n      'Adopted count': '',\n      'Growth Rate': ''\n    };\n    const sortedData = sortByHighestAdoptionRate(data);\n    if (sortedData.length > 0) {\n      return sortedData[0];\n    }\n    return AdoptionRate;\n  };\n  const [data, setData] = useState(templateData);\n  const [topAdoptionRate, setTopAdoptionRate] = useState(getHighestAdoptionRate(data));\n  console.log('top', topAdoptionRate);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top-adoption-rates\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'title',\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Top Template Adoption Rates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'top-adoption-percent',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"percent-circle\",\n        children: /*#__PURE__*/_jsxDEV(PercentCircle, {\n          title: 'Adoption rate',\n          titleColor: '#b4bfd5',\n          percentage: parseInt(topAdoptionRate['Adoption rate']),\n          size: 200,\n          strokeWidth: 15,\n          circleColor: '#305bf5',\n          textColor: '#fff',\n          emptyColor: '#1d2435',\n          minSize: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"top-template-detail\",\n        className: \"top-template-detail\",\n        children: [/*#__PURE__*/_jsxDEV(TextDisplay, {\n          title: 'Most Adopted Template',\n          textContent: topAdoptionRate.Template\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n          data: Object.entries(topAdoptionRate).slice(1).map(([key, value]) => ({\n            title: key,\n            content: value\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"template-adoption-grid\",\n      className: \"template-adoption-grid\",\n      children: /*#__PURE__*/_jsxDEV(DynamicGrid, {\n        data: templateData.slice(0, 3),\n        hasHeaders: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"See More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s2(TopAdoptionRates, \"vbNA9EwNGgMO5lG6hXCnBUtept4=\");\n_c = TopAdoptionRates;\nexport default TopAdoptionRates;\nvar _c;\n$RefreshReg$(_c, \"TopAdoptionRates\");","map":{"version":3,"names":["React","useState","useEffect","PercentCircle","DynamicGrid","TextDisplay","SimpleGrid","jsxDEV","_jsxDEV","TopAdoptionRates","_s2","_s","$RefreshSig$","templateData","Template","calculateAdoptionRate","totalUsers","adoptionCount","sortByHighestAdoptionRate","data","sort","a","b","adoptionRateA","parseFloat","replace","adoptionRateB","useDataFromApi","apiUrl","setData","fetchData","response","fetch","ok","jsonData","json","error","getHighestAdoptionRate","AdoptionRate","sortedData","length","topAdoptionRate","setTopAdoptionRate","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","titleColor","percentage","parseInt","size","strokeWidth","circleColor","textColor","emptyColor","minSize","textContent","Object","entries","slice","map","key","value","content","hasHeaders","_c","$RefreshReg$"],"sources":["/Users/lizzybear/adoption-rate-component/src/TopAdoptionRates.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TopAdoptionRates.scss';\nimport PercentCircle from './components/PercentCircle/PercentCircle';\nimport DynamicGrid from './components/DynamicGrid/DynamicGrid';\nimport TextDisplay from './components/TextDisplay/TextDisplay';\nimport SimpleGrid from './components/SimpleGrid/SimpleGrid';\n\ninterface AdoptionRate {\n  Template: string;\n  'Adoption rate': string;\n  'Total Users': string;\n  'Adopted count': string;\n  'Growth Rate': string;\n}\n\nfunction TopAdoptionRates() {\n  // I assume data won't really have Adoption rate provided and this will be something we need to calculate using adopted count / total users\n  // but for easy demosntration, will include it for the time being\n  const templateData = [\n    {\n      Template: 'fly-docker-image',\n      'Adoption rate': '80%',\n      'Total Users': '20',\n      'Adopted count': '16',\n      'Growth Rate': '5%',\n    },\n    {\n      Template: 'Develop in Docker',\n      'Adoption rate': '50%',\n      'Total Users': '20',\n      'Adopted count': '10',\n      'Growth Rate': '65%',\n    },\n    {\n      Template: 'Develop in Docker-2',\n      'Adoption rate': '30%',\n      'Total Users': '20',\n      'Adopted count': '6',\n      'Growth Rate': '15%',\n    },\n    {\n      Template: 'AWS EC2',\n      'Adoption rate': '10%',\n      'Total Users': '20',\n      'Adopted count': '2',\n      'Growth Rate': '1%',\n    },\n  ];\n\n  const calculateAdoptionRate = (totalUsers: number, adoptionCount: number) => {\n    return (adoptionCount / totalUsers) * 100;\n  };\n\n  // sort data in descending order (highest first)\n  const sortByHighestAdoptionRate = (data: AdoptionRate[]): AdoptionRate[] => {\n    return data.sort((a, b) => {\n      // Parse the Adoption rate percentage and remove the '%' sign\n      const adoptionRateA = parseFloat(a['Adoption rate'].replace('%', ''));\n      const adoptionRateB = parseFloat(b['Adoption rate'].replace('%', ''));\n\n      return adoptionRateB - adoptionRateA;\n    });\n  };\n\n  // Api call available for fetching data, if not implemented just use sample data\n  const useDataFromApi = (apiUrl: string) => {\n    const [data, setData] = useState<AdoptionRate[]>([]);\n\n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(apiUrl);\n          if (response.ok) {\n            const jsonData = await response.json();\n            setData(jsonData);\n          } else {\n            setData(templateData);\n          }\n        } catch (error) {\n          setData(templateData);\n        }\n      };\n\n      fetchData();\n    }, [apiUrl]);\n\n    return data;\n  };\n\n  const getHighestAdoptionRate = (data: AdoptionRate[]): AdoptionRate => {\n    const AdoptionRate = {\n      Template: '',\n      'Adoption rate': '',\n      'Total Users': '',\n      'Adopted count': '',\n      'Growth Rate': '',\n    };\n\n    const sortedData = sortByHighestAdoptionRate(data);\n\n    if (sortedData.length > 0) {\n      return sortedData[0];\n    }\n\n    return AdoptionRate;\n  };\n\n  const [data, setData] = useState(templateData);\n  const [topAdoptionRate, setTopAdoptionRate] = useState(\n    getHighestAdoptionRate(data)\n  );\n  console.log('top', topAdoptionRate);\n\n  return (\n    <div className=\"top-adoption-rates\">\n      <div className={'title'}>\n        <h4>Top Template Adoption Rates</h4>\n      </div>\n      <div className={'top-adoption-percent'}>\n        <div data-testid=\"percent-circle\">\n          <PercentCircle\n            title={'Adoption rate'}\n            titleColor={'#b4bfd5'}\n            percentage={parseInt(topAdoptionRate['Adoption rate'])}\n            size={200}\n            strokeWidth={15}\n            circleColor={'#305bf5'}\n            textColor={'#fff'}\n            emptyColor={'#1d2435'}\n            minSize={50}\n          />\n        </div>\n        <div data-testid=\"top-template-detail\" className=\"top-template-detail\">\n          <TextDisplay\n            title={'Most Adopted Template'}\n            textContent={topAdoptionRate.Template}\n          />\n          <SimpleGrid\n            data={Object.entries(topAdoptionRate)\n              .slice(1)\n              .map(([key, value]) => ({\n                title: key,\n                content: value,\n              }))}\n          />\n        </div>\n      </div>\n      <div\n        data-testid=\"template-adoption-grid\"\n        className=\"template-adoption-grid\"\n      >\n        <DynamicGrid data={templateData.slice(0,3)} hasHeaders />\n      </div>\n      <div>\n        See More\n      </div>\n    </div>\n  );\n}\n\nexport default TopAdoptionRates;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}